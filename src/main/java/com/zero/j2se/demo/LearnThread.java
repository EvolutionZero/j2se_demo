package com.zero.j2se.demo;

/**
 * 
 * CAS（Compare And Swap） 无锁算法是乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。
 * CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。
 *
 */
public class LearnThread {

	/**
	 * 原理:
	 * ThreadLocal为每个线程维护一个本地变量,采用空间换时间，它用于线程间的数据隔离，为每一个使用该变量的线程提供一个副本，每个线程都可以独立地改变自己的副本，而不会和其他线程的副本冲突。
	 * ThreadLocal类中维护一个Map，用于存储每一个线程的变量副本，Map中元素的键为线程对象，而值为对应线程的变量副本。
	 * 
	 * 总结：
	 * 1.通过访问副本来运行业务，这样的结果是耗费了内存，但大大减少了线程同步所带来性能消耗，也减少了线程并发控制的复杂度。
	 * 2.ThreadLocal不能使用原子类型，只能使用Object类型。
	 */
	private ThreadLocal<String> threadLocal = new ThreadLocal<>();
}
